# This workflow builds, tests, lints and deploys the backend
name: Build & Deploy Backend

# Workflow is triggered on backend commit/push
on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '**/workflows/backend.yml'

jobs:
  # This job builds, tests, lints and packages the artifact for the image job
  build:
    name: Build backend
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: backend

    services:
      mysql:
        image: mysql:8.0.27
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: dev_ops_proof_of_concept_test
          MYSQL_USER: test-user
          MYSQL_PASSWORD: test-password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    env: 
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_DATABASE: dev_ops_proof_of_concept_test
        DB_USERNAME: test-user
        DB_PASSWORD: test-password
        APP_ENV: testing

    steps:
    - name: Checkout git repo
      uses: actions/checkout@v2

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.0.14'
        tools: composer
        extensions: mbstring, dom, fileinfo, mysql
        coverage: xdebug

    - name: Get composer cache directory
      id: composer-cache
      run: echo "::set-output name=dir::$(composer config cache-files-dir)"
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Installing PHP dependencies
      run: composer install --prefer-dist

    - name: Running lint
      run: php artisan lint

    - name: Running static code analyse
      run: php artisan analyse:code

    - name: Running backend tests
      run: php artisan test

    - name: Archiving build
      run: zip -r -q build.zip ./*

    - name: Uploading build artifact
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: backend/build.zip

  # This job build docker image and publishes it in DockerHub
  image:
    name: Build & Publish image in DockerHub
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
    - name: Checkout git repo
      uses: actions/checkout@v2

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: build
        path: infrastructure/backend/build

    - name: Unzip artifact
      working-directory: infrastructure/backend/build
      run: unzip build.zip
    - name: Delete zip
      working-directory: infrastructure/backend/build
      run: unlink build.zip

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Get latest commit sha
      id: get-sha
      run: echo "::set-output name=short-sha::$(git rev-parse --short HEAD)"

    - name: Push docker image
      uses: docker/build-push-action@v2
      with:
        context: infrastructure/backend
        push: true
        tags: chavdarb/devops-sample-backend:${{steps.get-sha.outputs.short-sha}},chavdarb/devops-sample-backend:latest

    - name: Scan image for vulnerabilities
      uses: azure/container-scan@v0
      with:
        image-name: chavdarb/devops-sample-backend:${{steps.get-sha.outputs.short-sha}}

  # This job deploys backend to K8s
  deploy:
    name: Deploy backend
    runs-on: ubuntu-latest
    needs: image
    environment: production

    steps:
    - name: Checkout git repo
      uses: actions/checkout@v2

    - name: Setup kubectl
      uses: azure/setup-kubectl@v2.0
      with:
        version: v1.23.2

    - name: Connect to K8s cluster
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}

    - name: Get latest commit sha
      id: get-sha
      run: echo "::set-output name=short-sha::$(git rev-parse --short HEAD)"

    - name: Deploy backend to K8s cluster
      uses: Azure/k8s-deploy@v1.4
      with:
        manifests: infrastructure/backend.yaml
        images: 'chavdarb/devops-sample-backend:${{steps.get-sha.outputs.short-sha}}'

    - name: Delete migration job
      run: kubectl delete job db-migrate
    - name: Applying DB migrations
      run: kubectl apply -f infrastructure/db-migrate.yaml